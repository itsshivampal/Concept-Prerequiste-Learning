The sum-product and max-sum algorithms provide efficient and exact solutions
to inference problems in tree-structured graphs. For many practical applications,
however, we have to deal with graphs having loops.
The message passing framework can be generalized to arbitrary graph topolo-
gies, giving an exact inference procedure known as the junction tree algorithm (Lau-
ritzen and Spiegelhalter, 1988; Jordan, 2007). Here we give a brief outline of the
key steps involved. This is not intended to convey a detailed understanding of the
algorithm, but rather to give a flavour of the various stages involved. If the starting
point is a directed graph, it is first converted to an undirected graph by moraliza-
tion, whereas if starting from an undirected graph this step is not required. Next the
graph is triangulated, which involves finding chord-less cycles containing four or
more nodes and adding extra links to eliminate such chord-less cycles. For instance,
in the graph in Figure 8.36, the cycle A–C–B–D–A is chord-less a link could be
added between A and B or alternatively between C and D. Note that the joint dis-
tribution for the resulting triangulated graph is still defined by a product of the same
potential functions, but these are now considered to be functions over expanded sets
of variables. Next the triangulated graph is used to construct a new tree-structured
undirected graph called a join tree, whose nodes correspond to the maximal cliques
of the triangulated graph, and whose links connect pairs of cliques that have vari-
ables in common. The selection of which pairs of cliques to connect in this way is
important and is done so as to give a maximal spanning tree defined as follows. Of
all possible trees that link up the cliques, the one that is chosen is one for which the
weight of the tree is largest, where the weight for a link is the number of nodes shared
by the two cliques it connects, and the weight for the tree is the sum of the weights
for the links. If the tree is condensed, so that any clique that is a subset of another
clique is absorbed into the larger clique, this gives a junction tree. As a consequence
of the triangulation step, the resulting tree satisfies the running intersection property,
which means that if a variable is contained in two cliques, then it must also be con-
tained in every clique on the path that connects them. This ensures that inference
about variables will be consistent across the graph. Finally, a two-stage message
passing algorithm, essentially equivalent to the sum-product algorithm, can now be
applied to this junction tree in order to find marginals and conditionals. Although
the junction tree algorithm sounds complicated, at its heart is the simple idea that
we have used already of exploiting the factorization properties of the distribution to
allow sums and products to be interchanged so that partial summations can be per-
formed, thereby avoiding having to work directly with the joint distribution. The
role of the junction tree is to provide a precise and efficient way to organize these
computations. It is worth emphasizing that this is achieved using purely graphical
operations!
The junction tree is exact for arbitrary graphs and is efficient in the sense that
for a given graph there does not in general exist a computationally cheaper approach.
Unfortunately, the algorithm must work with the joint distributions within each node
(each of which corresponds to a clique of the triangulated graph) and so the compu-
tational cost of the algorithm is determined by the number of variables in the largest
8.4. Inference in Graphical Models
417
clique and will grow exponentially with this number in the case of discrete variables.
An important concept is the treewidth of a graph (Bodlaender, 1993), which is de-
fined in terms of the number of variables in the largest clique. In fact, it is defined to
be as one less than the size of the largest clique, to ensure that a tree has a treewidth
of 1. Because there in general there can be multiple different junction trees that can
be constructed from a given starting graph, the treewidth is defined by the junction
tree for which the largest clique has the fewest variables.
If the treewidth of the
original graph is high, the junction tree algorithm becomes impractical.
